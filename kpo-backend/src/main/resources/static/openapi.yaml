openapi: 3.0.3
info:
  title: Zoo Management API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /enclosures:
    post:
      summary: Create a new enclosure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnclosureRequest'
      responses:
        '200':
          description: Enclosure created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enclosure'
    get:
      summary: Get all enclosures
      responses:
        '200':
          description: List of enclosures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enclosure'
  /api/animals:
    post:
      summary: Create a new animal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalRequest'
      responses:
        '200':
          description: Animal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
    get:
      summary: Get all animals
      responses:
        '200':
          description: List of animals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
  /api/animals/{animalId}/move:
    post:
      summary: Move an animal to a new enclosure
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
        - name: newEnclosureId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Animal moved successfully
  /api/animals/stats:
    get:
      summary: Get zoo statistics
      responses:
        '200':
          description: Zoo statistics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZooStatsResponse'
  /feeding-schedule/{animalId}:
    post:
      summary: Schedule a feeding for an animal
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedingScheduleRequest'
      responses:
        '200':
          description: Feeding scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedingSchedule'
  /feeding-schedule/complete/{scheduleId}:
    post:
      summary: Mark a feeding as completed
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Feeding marked as completed
  /api/dictionaries/animal-species:
    get:
      summary: Get available animal species
      responses:
        '200':
          description: Species list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesResponse'
  /api/dictionaries/food-types:
    get:
      summary: Get available food types
      responses:
        '200':
          description: Food types list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodTypesResponse'
components:
  schemas:
    EnclosureRequest:
      type: object
      properties:
        allowedType:
          type: string
        size:
          type: number
        maxCapacity:
          type: integer
      required:
        - allowedType
        - size
        - maxCapacity
    Enclosure:
      type: object
      properties:
        id:
          type: integer
        allowedType:
          type: string
        size:
          type: number
        maxCapacity:
          type: integer
        animals:
          type: array
          items:
            $ref: '#/components/schemas/Animal'
    AnimalRequest:
      type: object
      properties:
        name:
          type: string
        species:
          type: string
        birthDate:
          type: string
          format: date
        gender:
          type: string
        favoriteFood:
          type: string
        status:
          type: string
      required:
        - name
        - species
        - birthDate
        - gender
        - favoriteFood
        - status
    Animal:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        animalSpecies:
          type: string
        birthDate:
          type: string
          format: date
        gender:
          type: string
        favoriteFood:
          type: string
        status:
          type: string
        currentEnclosure:
          $ref: '#/components/schemas/Enclosure'
    FeedingScheduleRequest:
      type: object
      properties:
        feedingTime:
          type: string
          example: '08:00'
        foodType:
          type: string
      required:
        - feedingTime
        - foodType
    FeedingSchedule:
      type: object
      properties:
        id:
          type: integer
        animal:
          $ref: '#/components/schemas/Animal'
        feedingTime:
          type: string
        foodType:
          type: string
        isCompleted:
          type: boolean
    ZooStatsResponse:
      type: object
      properties:
        totalAnimals:
          type: integer
        sickAnimalsCount:
          type: integer
        totalEnclosures:
          type: integer
        completedFeedings:
          type: integer
    SpeciesResponse:
      type: object
      properties:
        species:
          type: array
          items:
            type: string
    FoodTypesResponse:
      type: object
      properties:
        foodTypes:
          type: array
          items:
            type: string
